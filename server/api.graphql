### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Like {
  id: String!
  tweet: String!
  Tweet: Tweet!
  user: String!
  User: User!
}

input LikeCreateInput {
  id: String
  Tweet: TweetCreateOneWithoutLikeInput!
}

input LikeCreateManyWithoutTweetInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutTweetInput!]
}

input LikeCreateManyWithoutUserInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutUserInput!]
}

input LikeCreateWithoutTweetInput {
  id: String
  User: UserCreateOneWithoutLikeInput!
}

input LikeCreateWithoutUserInput {
  id: String
  Tweet: TweetCreateOneWithoutLikeInput!
}

input LikeWhereUniqueInput {
  id: String
}

type Mutation {
  createOneLike(data: LikeCreateInput!): Like!
  createOneTweet(data: TweetCreateInput!): Tweet!
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String!, pw: String!, user_name: String!): AuthPayload
  unLike(tweet: String!): Tweet
}

type Query {
  like(where: LikeWhereUniqueInput!): Like
  trend: [Trend!]
  tweet(where: TweetWhereUniqueInput!): Tweet
  tweets(after: TweetWhereUniqueInput, before: TweetWhereUniqueInput, first: Int, last: Int): [Tweet!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type Trend {
  name: String
  tweet_volume: String
  url: String
}

type Tweet {
  created: DateTime
  id: String!
  Like(after: LikeWhereUniqueInput, before: LikeWhereUniqueInput, first: Int, last: Int): [Like!]!
  message: String!
  user: User!
}

input TweetCreateInput {
  created: DateTime
  id: String
  Like: LikeCreateManyWithoutTweetInput
  message: String!
}

input TweetCreateManyWithoutUser_Tweet_userToUserInput {
  connect: [TweetWhereUniqueInput!]
  create: [TweetCreateWithoutUser_Tweet_userToUserInput!]
}

input TweetCreateOneWithoutLikeInput {
  connect: TweetWhereUniqueInput
  create: TweetCreateWithoutLikeInput
}

input TweetCreateWithoutLikeInput {
  created: DateTime
  id: String
  message: String!
  User_Tweet_userToUser: UserCreateOneWithoutTweet_Tweet_userToUserInput!
}

input TweetCreateWithoutUser_Tweet_userToUserInput {
  created: DateTime
  id: String
  Like: LikeCreateManyWithoutTweetInput
  message: String!
}

input TweetWhereUniqueInput {
  id: String
}

type User {
  email: String!
  id: String!
  Like(after: LikeWhereUniqueInput, before: LikeWhereUniqueInput, first: Int, last: Int): [Like!]!
  name: String!
  user_name: String!
}

input UserCreateOneWithoutLikeInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikeInput
}

input UserCreateOneWithoutTweet_Tweet_userToUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTweet_Tweet_userToUserInput
}

input UserCreateWithoutLikeInput {
  email: String!
  id: String
  name: String!
  pw: String!
  Tweet_Tweet_userToUser: TweetCreateManyWithoutUser_Tweet_userToUserInput
  user_name: String!
}

input UserCreateWithoutTweet_Tweet_userToUserInput {
  email: String!
  id: String
  Like: LikeCreateManyWithoutUserInput
  name: String!
  pw: String!
  user_name: String!
}

input UserWhereUniqueInput {
  email: String
  id: String
  user_name: String
}
